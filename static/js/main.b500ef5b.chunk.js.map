{"version":3,"sources":["Components/User.jsx","Components/TodoItem.jsx","Components/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["User","react_default","a","createElement","this","props","user","name","Component","TodoItem","className","item","completed","title","User_User","TodoList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","items","getItem","bind","assertThisInitialized","sortTitle","url","fetch","then","response","json","_this2","Promise","all","getUrl","_ref","_ref2","slicedToArray","todoS","users","setState","map","objectSpread","find","i","id","userId","prevState","sort","b","localeCompare","onClick","TodoItem_TodoItem","key","App","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yRAEqBA,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,UAAKC,KAAKC,MAAMC,KAAKC,aAHOC,aCCbC,mLAEjB,OACIR,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,MAAIO,WAAyC,IAA9BN,KAAKC,MAAMM,KAAKC,UAAqB,QAAU,OAC5DX,EAAAC,EAAAC,cAAA,UAAKC,KAAKC,MAAMM,KAAKE,OACrBZ,EAAAC,EAAAC,cAAA,WAAmC,IAA9BC,KAAKC,MAAMM,KAAKC,UAAhB,6BACLX,EAAAC,EAAAC,cAACW,EAAD,CAAMR,KAAMF,KAAKC,MAAMM,KAAKL,gBAPFE,aCAjBO,cACnB,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,KAAMC,KACDiB,MAAQ,CACXC,MAAO,IAETP,EAAKQ,QAAUR,EAAKQ,QAAQC,KAAbR,OAAAS,EAAA,EAAAT,CAAAD,IACfA,EAAKW,UAAYX,EAAKW,UAAUF,KAAfR,OAAAS,EAAA,EAAAT,CAAAD,IANAA,sEAQZY,GACL,OAAOC,MAAMD,GACZE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAAAC,GAAQ,OAAIA,sCAG5C,IAAAE,EAAA7B,KACR8B,QAAQC,IAAI,CACV/B,KAAKgC,OAAO,8CACZhC,KAAKgC,OAAO,gDACXN,KAAK,SAAAO,GAAA,IAAAC,EAAArB,OAAAsB,EAAA,EAAAtB,CAAAoB,EAAA,GAAEG,EAAFF,EAAA,GAASG,EAATH,EAAA,UAAoBL,EAAKS,SAAS,CACtCnB,MAAOiB,EAAMG,IAAI,SAAAhC,GAAI,OAAAM,OAAA2B,EAAA,EAAA3B,CAAA,GAChBN,EADgB,CAEnBL,KAAMmC,EAAMI,KAAK,SAACC,GAAD,OAAOA,EAAEC,KAAOpC,EAAKqC,qDAK5C5C,KAAKsC,SAAS,SAAAO,GAAS,MAAK,CAC1B1B,MAAO0B,EAAU1B,MAAM2B,KAAK,SAAChD,EAAGiD,GAAJ,OAAUjD,EAAEW,MAAMuC,cAAcD,EAAEtC,6CAKhE,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQkD,QAASjD,KAAKoB,SAAtB,gBACAvB,EAAAC,EAAAC,cAAA,UAAQkD,QAASjD,KAAKuB,WAAtB,mBACF1B,EAAAC,EAAAC,cAAA,aACGC,KAAKkB,MAAMC,MAAMoB,IAAI,SAAAhC,GAAI,OAAIV,EAAAC,EAAAC,cAACmD,EAAD,CAAUC,IAAK5C,EAAKoC,GAAIpC,KAAMA,eArC9BH,aCSvBgD,MARf,WACE,OACEvD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAACsD,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.b500ef5b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class User extends Component {\r\n  render() {\r\n    return (\r\n      <td>{this.props.user.name}</td>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport User from './User.jsx';\r\n\r\nexport default class TodoItem extends Component {\r\n  render() {\r\n    return (\r\n        <tbody>\r\n          <tr className={this.props.item.completed === true ? 'green' : 'red'}>\r\n            <td>{this.props.item.title}</td>\r\n            <td>{this.props.item.completed === true ? `completed` : `not completed`}</td>\r\n            <User user={this.props.item.user}/>\r\n          </tr>\r\n        </tbody>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem.jsx';\r\n\r\nexport default class TodoList extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      items: []\r\n    }\r\n    this.getItem = this.getItem.bind(this);\r\n    this.sortTitle = this.sortTitle.bind(this);\r\n  }\r\n  getUrl(url) {\r\n    return fetch(url)\r\n    .then(response => response.json()).then(response => response)\r\n  }\r\n\r\n  getItem() {\r\n    Promise.all([\r\n      this.getUrl('https://jsonplaceholder.typicode.com/todos'),\r\n      this.getUrl('https://jsonplaceholder.typicode.com/users')])\r\n      .then(([todoS, users]) => this.setState({\r\n        items: todoS.map(item => ({\r\n          ...item,\r\n          user: users.find((i) => i.id === item.userId)\r\n        }))\r\n      }))\r\n    }\r\n  sortTitle() {\r\n    this.setState(prevState => ({\r\n      items: prevState.items.sort((a, b) => a.title.localeCompare(b.title))\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.getItem}>Load Content</button>\r\n        <button onClick={this.sortTitle}>Change on Title</button>\r\n      <table>\r\n        {this.state.items.map(item => <TodoItem key={item.id} item={item}/>)}\r\n      </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './Components/TodoList.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}